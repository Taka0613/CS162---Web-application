{"ast":null,"code":"var _jsxFileName = \"/Users/takaya/Desktop/hierarchical-todo-list-app/frontend/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport API from '../api';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [lists, setLists] = useState([]);\n  const [newListTitle, setNewListTitle] = useState('');\n  const [error, setError] = useState('');\n  const fetchLists = async () => {\n    try {\n      const res = await API.get('/lists/', {\n        withCredentials: true\n      });\n      setLists(res.data.lists);\n      setError(''); // Clear any previous error on success\n    } catch (err) {\n      console.error(\"Error fetching lists:\", err);\n      setError(\"Unable to fetch lists. Please ensure you are logged in.\");\n    }\n  };\n  useEffect(() => {\n    fetchLists();\n  }, []);\n  const handleCreateList = async () => {\n    if (!newListTitle.trim()) {\n      setError(\"List title cannot be empty.\");\n      return;\n    }\n    try {\n      await API.post('/lists/', {\n        title: newListTitle\n      }, {\n        withCredentials: true\n      });\n      setNewListTitle('');\n      setError(''); // Clear any previous error on success\n      fetchLists();\n    } catch (err) {\n      console.error(\"Error creating list:\", err);\n      setError(\"Failed to create list. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Lists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: newListTitle,\n      onChange: e => setNewListTitle(e.target.value),\n      placeholder: \"New List Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateList,\n      children: \"Create List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: lists.map(lst => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/lists/${lst.list_id}`,\n          children: lst.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, lst.list_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"NZFIai7K/6lvSwzXlYIm191ReJQ=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","API","Link","jsxDEV","_jsxDEV","Dashboard","_s","lists","setLists","newListTitle","setNewListTitle","error","setError","fetchLists","res","get","withCredentials","data","err","console","handleCreateList","trim","post","title","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","value","onChange","e","target","placeholder","onClick","map","lst","to","list_id","_c","$RefreshReg$"],"sources":["/Users/takaya/Desktop/hierarchical-todo-list-app/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport API from '../api';\nimport { Link } from 'react-router-dom';\n\nfunction Dashboard() {\n  const [lists, setLists] = useState([]);\n  const [newListTitle, setNewListTitle] = useState('');\n  const [error, setError] = useState('');\n\n  const fetchLists = async () => {\n    try {\n      const res = await API.get('/lists/', { withCredentials: true });\n      setLists(res.data.lists);\n      setError('');  // Clear any previous error on success\n    } catch (err) {\n      console.error(\"Error fetching lists:\", err);\n      setError(\"Unable to fetch lists. Please ensure you are logged in.\");\n    }\n  };\n\n  useEffect(() => {\n    fetchLists();\n  }, []);\n\n  const handleCreateList = async () => {\n    if (!newListTitle.trim()) {\n      setError(\"List title cannot be empty.\");\n      return;\n    }\n\n    try {\n      await API.post(\n        '/lists/',\n        { title: newListTitle },\n        { withCredentials: true }\n      );\n      setNewListTitle('');\n      setError('');  // Clear any previous error on success\n      fetchLists();\n    } catch (err) {\n      console.error(\"Error creating list:\", err);\n      setError(\"Failed to create list. Please try again.\");\n    }\n  };\n\n  return (\n    <div>\n      <h2>Your Lists</h2>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      <input\n        value={newListTitle}\n        onChange={(e) => setNewListTitle(e.target.value)}\n        placeholder=\"New List Title\"\n      />\n      <button onClick={handleCreateList}>Create List</button>\n      <ul>\n        {lists.map((lst) => (\n          <li key={lst.list_id}>\n            <Link to={`/lists/${lst.list_id}`}>{lst.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}